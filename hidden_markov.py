# -*- coding: utf-8 -*-
"""Hidden Markov.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q3Jdh3cP95NSIdggi_Wwa4Msoqd4Amcx
"""

pip install hmmlearn

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from hmmlearn import hmm
from scipy.stats import norm

# Load your dataset from a CSV file
# Assuming the CSV file has columns named 'DATE' and 'Value'
file_path = 'Electric_Production.csv'
df = pd.read_csv(file_path, parse_dates=['DATE'], dayfirst=True)  # Parse 'DATE' column as datetime
df = df.sort_values(by='DATE')  # Ensure the data is sorted by date
data = df['Value'].values.reshape(-1, 1)  # Reshape data for HMM

# Define the number of hidden states (regimes) in the HMM
num_states = 3  # You can adjust this based on the characteristics of your data

# Create an HMM model
model = hmm.GaussianHMM(n_components=num_states, covariance_type="full")

# Fit the model to the data
model.fit(data)

# Predict the hidden states (regimes) for each data point
hidden_states = model.predict(data)

# Plot the original time series with the detected regimes
plt.figure(figsize=(12, 6))
plt.plot(df['DATE'], data, label='Original Data', color='blue')

for i in range(num_states):
    state_indices = np.where(hidden_states == i)
    plt.scatter(df['DATE'].iloc[state_indices], data[state_indices], label=f'Regime {i}', marker='x')

    # Estimate parameters for the Gaussian distribution of each regime
    regime_data = data[state_indices].reshape(-1)
    mean, std = np.mean(regime_data), np.std(regime_data)

    # Plot the estimated Gaussian distribution
    x = np.linspace(mean - 3 * std, mean + 3 * std, len(state_indices[0]))
    y = norm.pdf(x, loc=mean, scale=std)
    plt.plot(df['DATE'].iloc[state_indices[0]], y, label=f'Posterior at Regime {i}', linestyle='--')

plt.title('Change-Point Detection using Hidden Markov Model with Posterior Distributions')
plt.xlabel('Date')
plt.ylabel('Value')
plt.legend()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from hmmlearn import hmm
from scipy.stats import norm

# Load your dataset from a CSV file
# Assuming the CSV file has columns named 'DATE' and 'Value'
file_path = 'Electric_Production.csv'
df = pd.read_csv(file_path, parse_dates=['DATE'], dayfirst=True)  # Parse 'DATE' column as datetime
df = df.sort_values(by='DATE')  # Ensure the data is sorted by date
data = df['Value'].values.reshape(-1, 1)  # Reshape data for HMM

# Define the number of hidden states (regimes) in the HMM
num_states = 3  # You can adjust this based on the characteristics of your data

# Create an HMM model
model = hmm.GaussianHMM(n_components=num_states, covariance_type="full")

# Fit the model to the data
model.fit(data)

# Predict the hidden states (regimes) for each data point
hidden_states = model.predict(data)

# Plot the original time series with the detected regimes
plt.figure(figsize=(12, 6))
plt.plot(df['DATE'], data, label='Original Data', color='blue')

regime_plots = []
posterior_plots = []

for i in range(num_states):
    state_indices = np.where(hidden_states == i)

    # Plot for each regime
    plt.scatter(df['DATE'].iloc[state_indices], data[state_indices], label=f'Regime {i}', marker='x')
    plt.title(f'Change-Point Detection using Hidden Markov Model - Regime {i}')
    plt.xlabel('Date')
    plt.ylabel('Value')
    plt.legend()
    plt.show()

    # Estimate parameters for the Gaussian distribution of each regime
    regime_data = data[state_indices].reshape(-1)
    mean, std = np.mean(regime_data), np.std(regime_data)

    # Plot the estimated Gaussian distribution for each regime
    x = np.linspace(mean - 3 * std, mean + 3 * std, len(state_indices[0]))
    y = norm.pdf(x, loc=mean, scale=std)

    plt.plot(df['DATE'].iloc[state_indices[0]], y, label=f'Posterior at Regime {i}', linestyle='--')
    plt.title(f'Posterior Distribution - Regime {i}')
    plt.xlabel('Date')
    plt.ylabel('Density')
    plt.legend()
    plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from hmmlearn import hmm
from scipy.stats import norm

# Load your dataset from a CSV file
# Assuming the CSV file has columns named 'DATE' and 'Value'
file_path = 'AAPL.csv'
df = pd.read_csv(file_path, parse_dates=['Date'], dayfirst=True)  # Parse 'DATE' column as datetime
df = df.sort_values(by='Date')  # Ensure the data is sorted by date
data = df['Open'].values.reshape(-1, 1)  # Reshape data for HMM

# Define the number of hidden states (regimes) in the HMM
num_states = 3  # You can adjust this based on the characteristics of your data

# Create an HMM model
model = hmm.GaussianHMM(n_components=num_states, covariance_type="full")

# Fit the model to the data
model.fit(data)

# Predict the hidden states (regimes) for each data point
hidden_states = model.predict(data)

# Plot the original time series with the detected regimes
plt.figure(figsize=(12, 6))
plt.plot(df['Date'], data, label='Original Data', color='blue')

for i in range(num_states):
    state_indices = np.where(hidden_states == i)
    plt.scatter(df['Date'].iloc[state_indices], data[state_indices], label=f'Regime {i}', marker='x')

    # Estimate parameters for the Gaussian distribution of each regime
    regime_data = data[state_indices].reshape(-1)
    mean, std = np.mean(regime_data), np.std(regime_data)

    # Plot the estimated Gaussian distribution
    x = np.linspace(mean - 3 * std, mean + 3 * std, len(state_indices[0]))
    y = norm.pdf(x, loc=mean, scale=std)
    plt.plot(df['Date'].iloc[state_indices[0]], y, label=f'Posterior at Regime {i}', linestyle='--')

plt.title('Change-Point Detection using Hidden Markov Model with Posterior Distributions')
plt.xlabel('Date')
plt.ylabel('Open')
plt.legend()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from hmmlearn import hmm
from scipy.stats import norm

# Load your dataset from a CSV file
# Assuming the CSV file has columns named 'Date' and 'Open'
file_path = 'AAPL.csv'
df = pd.read_csv(file_path, parse_dates=['Date'], dayfirst=True)  # Parse 'DATE' column as datetime
df = df.sort_values(by='Date')  # Ensure the data is sorted by date
data = df['High'].values.reshape(-1, 1)  # Reshape data for HMM

# Define the number of hidden states (regimes) in the HMM
num_states = 3  # You can adjust this based on the characteristics of your data

# Create an HMM model
model = hmm.GaussianHMM(n_components=num_states, covariance_type="full")

# Fit the model to the data
model.fit(data)

# Predict the hidden states (regimes) for each data point
hidden_states = model.predict(data)

# Plot the original time series with the detected regimes
plt.figure(figsize=(12, 6))
plt.plot(df['Date'], data, label='Original Data', color='blue')

regime_plots = []
posterior_plots = []

for i in range(num_states):
    state_indices = np.where(hidden_states == i)

    # Plot for each regime
    plt.scatter(df['Date'].iloc[state_indices], data[state_indices], label=f'Regime {i}', marker='x')
    plt.title(f'Change-Point Detection using Hidden Markov Model - Regime {i}')
    plt.xlabel('Date')
    plt.ylabel('High')
    plt.legend()
    plt.show()

    # Estimate parameters for the Gaussian distribution of each regime
    regime_data = data[state_indices].reshape(-1)
    mean, std = np.mean(regime_data), np.std(regime_data)

    # Plot the estimated Gaussian distribution for each regime
    x = np.linspace(mean - 3 * std, mean + 3 * std, len(state_indices[0]))
    y = norm.pdf(x, loc=mean, scale=std)

    plt.plot(df['Date'].iloc[state_indices[0]], y, label=f'Posterior at Regime {i}', linestyle='--')
    plt.title(f'Posterior Distribution - Regime {i}')
    plt.xlabel('Date')
    plt.ylabel('Density')
    plt.legend()
    plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from hmmlearn import hmm
from scipy.stats import norm

# Load your dataset from a CSV file
# Assuming the CSV file has columns named 'DATE' and 'Value'
file_path = 'DailyDelhiClimateTrain.csv'
df = pd.read_csv(file_path, parse_dates=['date'], dayfirst=True)  # Parse 'DATE' column as datetime
df = df.sort_values(by='date')  # Ensure the data is sorted by date
data = df['meantemp'].values.reshape(-1, 1)  # Reshape data for HMM

# Define the number of hidden states (regimes) in the HMM
num_states = 3  # You can adjust this based on the characteristics of your data

# Create an HMM model
model = hmm.GaussianHMM(n_components=num_states, covariance_type="full")

# Fit the model to the data
model.fit(data)

# Predict the hidden states (regimes) for each data point
hidden_states = model.predict(data)

# Plot the original time series with the detected regimes
plt.figure(figsize=(12, 6))
plt.plot(df['date'], data, label='Original Data', color='blue')

for i in range(num_states):
    state_indices = np.where(hidden_states == i)
    plt.scatter(df['date'].iloc[state_indices], data[state_indices], label=f'Regime {i}', marker='x')

    # Estimate parameters for the Gaussian distribution of each regime
    regime_data = data[state_indices].reshape(-1)
    mean, std = np.mean(regime_data), np.std(regime_data)

    # Plot the estimated Gaussian distribution
    x = np.linspace(mean - 3 * std, mean + 3 * std, len(state_indices[0]))
    y = norm.pdf(x, loc=mean, scale=std)
    plt.plot(df['date'].iloc[state_indices[0]], y, label=f'Posterior at Regime {i}', linestyle='--')

plt.title('Change-Point Detection using Hidden Markov Model with Posterior Distributions')
plt.xlabel('date')
plt.ylabel('meantemp')
plt.legend()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from hmmlearn import hmm
from scipy.stats import norm

# Load your dataset from a CSV file
# Assuming the CSV file has columns named 'Date' and 'Open'
file_path = 'DailyDelhiClimateTrain.csv'
df = pd.read_csv(file_path, parse_dates=['date'], dayfirst=True)  # Parse 'DATE' column as datetime
df = df.sort_values(by='date')  # Ensure the data is sorted by date
data = df['meantemp'].values.reshape(-1, 1)  # Reshape data for HMM

# Define the number of hidden states (regimes) in the HMM
num_states = 3  # You can adjust this based on the characteristics of your data

# Create an HMM model
model = hmm.GaussianHMM(n_components=num_states, covariance_type="full")

# Fit the model to the data
model.fit(data)

# Predict the hidden states (regimes) for each data point
hidden_states = model.predict(data)

# Plot the original time series with the detected regimes
plt.figure(figsize=(12, 6))
plt.plot(df['date'], data, label='Original Data', color='blue')

regime_plots = []
posterior_plots = []

for i in range(num_states):
    state_indices = np.where(hidden_states == i)

    # Plot for each regime
    plt.scatter(df['date'].iloc[state_indices], data[state_indices], label=f'Regime {i}', marker='x')
    plt.title(f'Change-Point Detection using Hidden Markov Model - Regime {i}')
    plt.xlabel('date')
    plt.ylabel('High')
    plt.legend()
    plt.show()

    # Estimate parameters for the Gaussian distribution of each regime
    regime_data = data[state_indices].reshape(-1)
    mean, std = np.mean(regime_data), np.std(regime_data)

    # Plot the estimated Gaussian distribution for each regime
    x = np.linspace(mean - 3 * std, mean + 3 * std, len(state_indices[0]))
    y = norm.pdf(x, loc=mean, scale=std)

    plt.plot(df['date'].iloc[state_indices[0]], y, label=f'Posterior at Regime {i}', linestyle='--')
    plt.title(f'Posterior Distribution - Regime {i}')
    plt.xlabel('date')
    plt.ylabel('Density')
    plt.legend()
    plt.show()